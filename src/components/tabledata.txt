import React from 'react';
import './TableData.css';

class TableData extends React.Component{
   
    constructor(props) {
        super(props);
        this.handleChange = this.handleChange.bind(this);
        this.filterByCountry = this.filterByCountry.bind(this);
        this.handleChangeS = this.handleChangeS.bind(this);
        this.filterByState = this.filterByState.bind(this);
        this.handleChangeF = this.handleChangeF.bind(this);
        this.filterByFullName = this.filterByFullName.bind(this);
        this.handleChangeA = this.handleChangeA.bind(this);
        this.filterByActive = this.filterByActive.bind(this);
        this.handleChangeBM = this.handleChangeBM.bind(this);
        this.handleChangeBV = this.handleChangeBV.bind(this);
        this.filterByBalance = this.filterByBalance.bind(this);
        this.filterByRegistered = this.filterByRegistered.bind(this);
        this.state={
            data:[],
            temp:[],
            value:"",
            valueS:"",
            valueF:"",
            valueA:"",
            valueManje:"",
            valueVise:""
        }

       

      }
    
    componentDidMount(){
        fetch('https://fww-demo.herokuapp.com/')
        .then(result => result.json())
        .then(result => {
           
           
            this.setState({
                data:result,
               
            })


        });

    
        
    }

    /*compareBy(key) {
        return function (a, b) {
          if (a[key] < b[key]) return -1;
          if (a[key] > b[key]) return 1;
          return 0;
        };
      }
     
      sortBy(key) {
        let arrayCopy = [...this.state.data];
        arrayCopy.sort(this.compareBy(key));
        this.setState({data: arrayCopy});
      }*/


      filterByCountry(event){
       
        
            const itemNames = this.state.data.filter( 
                (eachObj) => eachObj.country==this.state.value 
   
            );
       
            this.setState({
            data:itemNames,
               
            })

            event.preventDefault();
      
      }

      filterByState(event){
       
    var cat = this.state.valueS;
    var result = this.state.data.reduce((a, o) => { 
     
      var filtered = o.state.filter(({name}) => cat === name);
      
      if (filtered.length) { 
      
        a.push(Object.assign({}, o, {state: filtered}));
      }
      
      return a;
    }, []);

console.log(result);

this.setState({data: result});

event.preventDefault();
  
  }

  filterByFullName(event){
       
    var cat = this.state.valueF;
    var result = this.state.data.reduce((a, o) => { 
     

      var filtered=o.state.reduce((b,c)=>{
        var filtered2 = c.users.filter(({fullName}) => cat === fullName);


        if (filtered2.length) { 
      
            b.push(Object.assign({}, c, {users: filtered2}));
          }

          console.log(filtered2);
          return b;
      },[]);

      console.log(filtered);
      
     if (filtered.length) { 
      
        a.push(Object.assign({}, o, {state: filtered}));
      }
      
      return a;
    }, []);

console.log(result);

this.setState({data: result});

event.preventDefault();
  
  }

  filterByActive(event){
       
    var cat = (this.state.valueA == 'true');
    var result = this.state.data.reduce((a, o) => { 
     

      var filtered=o.state.reduce((b,c)=>{
        var filtered2 = c.users.filter(({isActive}) => 
        {
            return cat == isActive;
        }
       );

        if (filtered2.length) { 
      
            b.push(Object.assign({}, c, {users: filtered2}));
          }

          console.log(filtered2);
          return b;
      },[]);

      console.log(filtered);
      
     if (filtered.length) { 
      
        a.push(Object.assign({}, o, {state: filtered}));
      }
      
      return a;
    }, []);

console.log(result);

this.setState({data: result});

event.preventDefault();
  
  }

  filterByBalance(event){
    console.log(event.target.balanceM.value);
    console.log(event.target.balanceV.value);
    var catManje = this.state.valueManje;
    var catVise = this.state.valueVise;
    var result = this.state.data.reduce((a, o) => { 
     

      var filtered=o.state.reduce((b,c)=>{
        var filtered2 = c.users.filter(({balance}) => 
        {
            var number = Number(balance.replace(/[^0-9.-]+/g,""));
            return number < catVise && number> catManje;
        }
       );

        if (filtered2.length) { 
      
            b.push(Object.assign({}, c, {users: filtered2}));
          }

         
          return b;
      },[]);

      
      
     if (filtered.length) { 
      
        a.push(Object.assign({}, o, {state: filtered}));
      }
      
      return a;
    }, []);



this.setState({data: result});

event.preventDefault();
  }


        filterByRegistered(){
            var d=new Date("2014-02-22T12:35:59");
            var p="2014-02-01";
            var r="2014-03-01";
            
            console.log(d.getDate());
        
        }
    
      handleChange(event) {
        
        this.setState({value: event.target.value});
      }

       handleChangeS(event) {
        this.setState({valueS: event.target.value});
      }

      handleChangeF(event) {
        this.setState({valueF: event.target.value});
      }

      handleChangeA(event) {
        this.setState({valueA: event.target.value});
      }

      handleChangeBM(event) {
        this.setState({
            valueManje: event.target.value,
           
        });
      }
      handleChangeBV(event) {
        this.setState({
           
            valueVise: event.target.value,
        });
      }
      
   
    render(){
        console.log(this.state);
      
        const allCountry=this.state.data.map(item=>{
            const allState=item.state.map( state =>{
                
                const AllUsers=state.users.map((user,i)=>{
                   
                        return(
                            <tr>
                                <td>{item.country}</td>
                                <td>{state.name}</td>
                                <td>{user.fullName}</td>
                                <td>{user.balance}</td>
                                <td>{user.isActive ? 'true': 'false'}</td>
                                <td>{user.registered}</td>
                            </tr>
                        )
                    
                    
                })
                return(
                   
                    <tbody>
                    {
                        AllUsers
                    }
                    </tbody>
                    
                )
            }

            )
            return(
                    <>
                    {
                        allState
                    }
                    </>
               

            )
        });

    
       

        return(
            <>
             <form onSubmit={this.filterByCountry}>
        <label>
         Filter by country:
          <input type="text" value={this.state.value} onChange={this.handleChange} />
        </label>
         <input type="submit" value="Submit" />
        </form>
        <form onSubmit={this.filterByState}>
        <label>
         Filter by state:
          <input type="text" value={this.state.valueS} onChange={this.handleChangeS} />
        </label>
         <input type="submit" value="Submit" />
        </form>

        <form onSubmit={this.filterByFullName}>
        <label>
         Filter by full name:
          <input type="text" value={this.state.valueF} onChange={this.handleChangeF} />
        </label>
         <input type="submit" value="Submit" />
        </form>
        <form onSubmit={this.filterByActive}>
        <label>
         Filter by isActive:
          <input type="text" value={this.state.valueA} onChange={this.handleChangeA} />
        </label>
         <input type="submit" value="Submit" />
        </form>

        <form onSubmit={this.filterByBalance}>
        <label>
         Filter by balance:
          
         <input type="text" name="balanceM" value={this.state.valueManje} onChange={this.handleChangeBM} />
         <input type="text" name="balanceV" value={this.state.valueVise} onChange={this.handleChangeBV} />
        </label>
         <input type="submit" value="Submit" />
        </form>
            <table>
                    <thead>
                    <tr>
                    <th>Country</th>
                    <th onClick={() => this.filterByState()}>State</th>
                    <th >Full name</th>
                    <th onClick={() => this.filterByBalance()}>Balance</th>
                    <th>isActive</th>
                    <th onClick={() => this.filterByRegistered()}>Registered</th>
                    </tr>
                    </thead>
             {
                 allCountry
             }
            </table>
            </>
        )
    }
}

export default TableData;